import { shrinkMatrix_Boundery } from "../../utils/SequenceHandler";

const { createSlice } = require("@reduxjs/toolkit");

const sequenceSlice = createSlice({
  name: "sequence",
  initialState: {
    sequenceArray: [],
    sequenceTempArrayLeft: [
      [
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
      ],
      [
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
      ],
      [
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
      ],
      [
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
      ],
      [
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
      ],
      [
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
      ],
      [
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
      ],
      [
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
      ],
      [
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
      ],
      [
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
      ],
    ],
    sequenceTempArrayRight: [
      [
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
      ],
      [
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
      ],
      [
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
      ],
      [
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
      ],
      [
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
      ],
      [
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
      ],
      [
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
      ],
      [
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
      ],
      [
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
      ],
      [
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
        "T",
      ],
    ],
    currentIndex: 0,
    flagsForRevers: [],
  },
  reducers: {
    addSequence(state, action) {
      if (state.sequenceArray.length === 10) return;
      state.sequenceArray.push(action.payload);
      state.flagsForRevers.push(false);
    },
    setSequenceEmpty(state, action) {
      state.sequenceArray = [];
    },
    setCurrentIndex(state, action) {
      state.currentIndex = action.payload;
    },
    moveCurrentIndexUp(state, action) {
      if (state.currentIndex === 1) return;

      state.currentIndex -= 1;
    },
    moveCurrentIndexDown(state, action) {
      if (state.currentIndex === state.sequenceArray.length) return;
      state.currentIndex += 1;
    },
    reverseCurrentSequence(state, action) {
      let index = state.currentIndex;
      let temp = [...state.sequenceArray[index - 1]];
      temp = temp.reverse();
      state.sequenceArray[index - 1] = temp;
      state.flagsForRevers[index - 1] = !state.flagsForRevers[index - 1];
    },
    deleteCurrentSequence(state, action) {
      let index = state.currentIndex - 1;
      state.sequenceArray.splice(index, 1);
      state.flagsForRevers.splice(index, 1);
      state.currentIndex = 1;
    },
    shiftToRightSequence(state, action) {
      let index = state.currentIndex - 1;
      // let temp = state.sequenceArray[index].pop();
      // state.sequenceArray[index].unshift(temp);
      let lastElInLeftArray = state.sequenceTempArrayLeft[index].pop();
      state.sequenceTempArrayLeft[index].unshift("T");
      state.sequenceArray[index].unshift(lastElInLeftArray);
      let lastEl = state.sequenceArray[index].pop();
      state.sequenceTempArrayRight[index].unshift(lastEl);
    },
    shiftToLeftSequence(state, action) {
      let index = state.currentIndex - 1;
      // let temp = state.sequenceArray[index].shift();
      // state.sequenceArray[index].push(temp);
      let lastEl = state.sequenceTempArrayRight[index].shift();
      state.sequenceTempArrayRight[index].push("T");
      state.sequenceArray[index].push(lastEl);
      let firstEl = state.sequenceArray[index].shift();
      state.sequenceTempArrayLeft[index].shift();
      state.sequenceTempArrayLeft[index].push(firstEl);
    },
    swapWithUpperRow(state, action) {
      let index = state.currentIndex - 1;
      if (index == 0) return;

      let temp = state.sequenceArray[index];
      state.sequenceArray[index] = state.sequenceArray[index - 1];
      state.sequenceArray[index - 1] = temp;
      state.currentIndex--;
    },
    swapWithBottomRow(state, action) {
      let index = state.currentIndex - 1;
      if (index == state.sequenceArray.length - 1) return;

      let temp = state.sequenceArray[index];
      state.sequenceArray[index] = state.sequenceArray[index + 1];
      state.sequenceArray[index + 1] = temp;
      state.currentIndex++;
    },

    sequenceOnHoverEffect(state, action) {
      // action.payload : seq1,seq2,len , start
      let { maxT_Left } = shrinkMatrix_Boundery(state.sequenceArray);
      const { seq1, seq2, start, sequenceLen } = action.payload;

      for (let i = sequenceLen - 1; i >= 0; i--) {
        state.sequenceArray[seq1][start + maxT_Left + i] += " TT";
        state.sequenceArray[seq2][start + maxT_Left + i] += " TT";
      }
    },
    sequenceOnHoverExitEffect(state, action) {
      // action.payload : seq1,seq2,len , start , sequence
      let { maxT_Left } = shrinkMatrix_Boundery(state.sequenceArray);
      const { seq1, seq2, start, sequenceLen, sequence } = action.payload;

      for (let i = sequenceLen - 1; i >= 0; i--) {
        state.sequenceArray[seq1][start + maxT_Left + i] = sequence[i];
        state.sequenceArray[seq2][start + maxT_Left + i] = sequence[i];
      }
    },
  },
});

export const sequenceAction = sequenceSlice.actions;

export default sequenceSlice.reducer;
